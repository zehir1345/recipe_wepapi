// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TezAPI.Persistence.Contexts;

#nullable disable

namespace TezAPI.Persistence.Migrations
{
    [DbContext(typeof(TezAPIDbContext))]
    [Migration("20231226151959_mig2")]
    partial class mig2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AllergyUser", b =>
                {
                    b.Property<Guid>("UserAllergiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserAllergiesId1")
                        .HasColumnType("uuid");

                    b.HasKey("UserAllergiesId", "UserAllergiesId1");

                    b.HasIndex("UserAllergiesId1");

                    b.ToTable("AllergyUser");
                });

            modelBuilder.Entity("CategoryRecipe", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoriesId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("CategoryRecipe");
                });

            modelBuilder.Entity("CategoryUser", b =>
                {
                    b.Property<Guid>("UserCategoriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserFavoriteCategoriesId")
                        .HasColumnType("uuid");

                    b.HasKey("UserCategoriesId", "UserFavoriteCategoriesId");

                    b.HasIndex("UserFavoriteCategoriesId");

                    b.ToTable("CategoryUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RecipeRecipeImageFile", b =>
                {
                    b.Property<Guid>("RecipeImageFilesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("uuid");

                    b.HasKey("RecipeImageFilesId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("RecipeRecipeImageFile");
                });

            modelBuilder.Entity("RecipeUser", b =>
                {
                    b.Property<Guid>("FavoriteRecipesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("FavoriteRecipesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RecipeUser");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.Allergy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("084fc693-c596-4870-a169-72e6ae0e433a"),
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3156),
                            Name = "Dairy"
                        },
                        new
                        {
                            Id = new Guid("c5842b74-7539-4e64-adbd-6d45b0793b49"),
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3158),
                            Name = "Gluten"
                        },
                        new
                        {
                            Id = new Guid("aa58123e-97cc-4520-84b4-12c874ac76e3"),
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3160),
                            Name = "Peanut"
                        },
                        new
                        {
                            Id = new Guid("3a5d84f5-20d1-4f77-88a3-110932dfc7f4"),
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3161),
                            Name = "Dessert"
                        },
                        new
                        {
                            Id = new Guid("596e578d-e635-42b5-a496-0d8a19ddaee1"),
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3163),
                            Name = "Soy"
                        },
                        new
                        {
                            Id = new Guid("4a81f4a5-6d98-48ea-ad28-a525c036e91c"),
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3164),
                            Name = "Egg"
                        },
                        new
                        {
                            Id = new Guid("8fd33f8d-9c5b-40ab-91d5-4a032a6f8ccb"),
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3166),
                            Name = "Seafood"
                        },
                        new
                        {
                            Id = new Guid("19223370-c44e-4326-bc22-0385f8cf17e5"),
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3182),
                            Name = "Shellfish"
                        },
                        new
                        {
                            Id = new Guid("d3ceb332-e3a2-478b-99dc-9d78581e263f"),
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3184),
                            Name = "Pork"
                        },
                        new
                        {
                            Id = new Guid("19b4b29c-fc6a-4f26-ac07-7b31e9da49d3"),
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3185),
                            Name = "Wheat"
                        },
                        new
                        {
                            Id = new Guid("e190704a-fa3c-4e98-a79d-d2bab792a5a5"),
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3186),
                            Name = "Sesame"
                        });
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("149f9953-afe1-46f8-960e-469adda123f4"),
                            CategoryName = "Beef",
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3309)
                        },
                        new
                        {
                            Id = new Guid("8c5e7b14-c32f-4424-a9ab-bf8bb3769f54"),
                            CategoryName = "Breakfast",
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3311)
                        },
                        new
                        {
                            Id = new Guid("6fd19800-99f5-435e-a43a-0deb15bab283"),
                            CategoryName = "Chicken",
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3313)
                        },
                        new
                        {
                            Id = new Guid("ceb65b84-edf2-4df9-b388-0c289b523006"),
                            CategoryName = "Dessert",
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3315)
                        },
                        new
                        {
                            Id = new Guid("05e4e462-3271-4f3f-b623-6c2f306701ca"),
                            CategoryName = "Goat",
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3319)
                        },
                        new
                        {
                            Id = new Guid("df03b51c-9f34-4c09-aa92-667a50567c03"),
                            CategoryName = "Lamb",
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3321)
                        },
                        new
                        {
                            Id = new Guid("d34a85e0-1043-4135-9e0b-e14d2d64cf77"),
                            CategoryName = "Miscellaneous",
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3322)
                        },
                        new
                        {
                            Id = new Guid("f3d64d51-a2f7-4c87-ad6e-39c496efdc91"),
                            CategoryName = "Pasta",
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3324)
                        },
                        new
                        {
                            Id = new Guid("1ef6d1b5-f902-4217-88ae-0eed5558efc1"),
                            CategoryName = "Pork",
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3325)
                        },
                        new
                        {
                            Id = new Guid("acfe695e-4dd4-4d91-9ec4-607277b3e4ed"),
                            CategoryName = "Seafood",
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3333)
                        },
                        new
                        {
                            Id = new Guid("2b9db212-cbb6-4d6a-bb7d-dedc51bb1311"),
                            CategoryName = "Side",
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3334)
                        },
                        new
                        {
                            Id = new Guid("16be813f-b5f8-4d8f-9bde-dd5f38b43932"),
                            CategoryName = "Starter",
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3336)
                        },
                        new
                        {
                            Id = new Guid("677f7540-44a7-4046-a07a-dd125bd9c0e8"),
                            CategoryName = "Vegan",
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3339)
                        },
                        new
                        {
                            Id = new Guid("b42d2b2c-f78e-4e14-8df2-e4877be9f284"),
                            CategoryName = "Vegetarian",
                            CreatedDate = new DateTime(2023, 12, 26, 15, 19, 59, 303, DateTimeKind.Utc).AddTicks(3341)
                        });
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Files");

                    b.HasDiscriminator<string>("Discriminator").HasValue("File");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AllergyId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<int>("CookingTime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PreparationTime")
                        .HasColumnType("integer");

                    b.Property<string>("RecipeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RecipeText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AllergyId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.RecipeComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("RecipeComments");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.RecipeIngredient", b =>
                {
                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("RecipeId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("RecipeIngredients");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.RecipeImageFile", b =>
                {
                    b.HasBaseType("TezAPI.Domain.Entities.File");

                    b.HasDiscriminator().HasValue("RecipeImageFile");
                });

            modelBuilder.Entity("AllergyUser", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Allergy", null)
                        .WithMany()
                        .HasForeignKey("UserAllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TezAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserAllergiesId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryRecipe", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TezAPI.Domain.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryUser", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TezAPI.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("UserFavoriteCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TezAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeRecipeImageFile", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.RecipeImageFile", null)
                        .WithMany()
                        .HasForeignKey("RecipeImageFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TezAPI.Domain.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeUser", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("FavoriteRecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TezAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.Identity.AppUser", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.Recipe", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Allergy", "Allergy")
                        .WithMany()
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TezAPI.Domain.Entities.User", "Writer")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergy");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.RecipeComment", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Recipe", "Recipe")
                        .WithMany("Comments")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TezAPI.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.RecipeIngredient", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Ingredient", "Ingredient")
                        .WithMany("Recipes")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TezAPI.Domain.Entities.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.Ingredient", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.Recipe", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
