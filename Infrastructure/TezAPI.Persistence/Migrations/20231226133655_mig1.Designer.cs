// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TezAPI.Persistence.Contexts;

#nullable disable

namespace TezAPI.Persistence.Migrations
{
    [DbContext(typeof(TezAPIDbContext))]
    [Migration("20231226133655_mig1")]
    partial class mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AllergyUser", b =>
                {
                    b.Property<Guid>("UserAllergiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserAllergiesId1")
                        .HasColumnType("uuid");

                    b.HasKey("UserAllergiesId", "UserAllergiesId1");

                    b.HasIndex("UserAllergiesId1");

                    b.ToTable("AllergyUser");
                });

            modelBuilder.Entity("CategoryRecipe", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoriesId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("CategoryRecipe");
                });

            modelBuilder.Entity("CategoryUser", b =>
                {
                    b.Property<Guid>("UserCategoriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserFavoriteCategoriesId")
                        .HasColumnType("uuid");

                    b.HasKey("UserCategoriesId", "UserFavoriteCategoriesId");

                    b.HasIndex("UserFavoriteCategoriesId");

                    b.ToTable("CategoryUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RecipeRecipeImageFile", b =>
                {
                    b.Property<Guid>("RecipeImageFilesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("uuid");

                    b.HasKey("RecipeImageFilesId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("RecipeRecipeImageFile");
                });

            modelBuilder.Entity("RecipeUser", b =>
                {
                    b.Property<Guid>("FavoriteRecipesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("FavoriteRecipesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RecipeUser");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.Allergy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aeaab8ec-6ea6-490c-83a6-ce51560df080"),
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8190),
                            Name = "Dairy"
                        },
                        new
                        {
                            Id = new Guid("8a83dacd-60b6-4008-bccf-f11c2c67758b"),
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8194),
                            Name = "Gluten"
                        },
                        new
                        {
                            Id = new Guid("14438f9d-7598-44ab-9194-6375798edd47"),
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8196),
                            Name = "Peanut"
                        },
                        new
                        {
                            Id = new Guid("80d064cb-6583-4175-a15d-0112adfcf63b"),
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8198),
                            Name = "Dessert"
                        },
                        new
                        {
                            Id = new Guid("6f491387-38bd-4478-aac6-00a2190e9373"),
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8199),
                            Name = "Soy"
                        },
                        new
                        {
                            Id = new Guid("b76a0979-6ba8-4c12-aaa7-b28bb5226c1f"),
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8201),
                            Name = "Egg"
                        },
                        new
                        {
                            Id = new Guid("f1c4ec13-7077-41ec-b476-3690708d8d08"),
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8202),
                            Name = "Seafood"
                        },
                        new
                        {
                            Id = new Guid("30146674-1018-4ebd-8238-71e8d6494bfc"),
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8204),
                            Name = "Shellfish"
                        },
                        new
                        {
                            Id = new Guid("b197526d-79ed-43d2-862e-0c62362a0fd8"),
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8207),
                            Name = "Pork"
                        },
                        new
                        {
                            Id = new Guid("56d803fd-881c-4094-aa81-a4bdbb205028"),
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8209),
                            Name = "Wheat"
                        },
                        new
                        {
                            Id = new Guid("e0637de3-160a-4518-a12b-f737d635be24"),
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8210),
                            Name = "Sesame"
                        });
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34c978b6-d0b0-452f-b310-6d1a85f09b0f"),
                            CategoryName = "Beef",
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8327)
                        },
                        new
                        {
                            Id = new Guid("0452adc0-9593-4cf0-8dd7-78124cd9f7f9"),
                            CategoryName = "Breakfast",
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8329)
                        },
                        new
                        {
                            Id = new Guid("c65f0079-5349-4b69-8bdd-e48572a5ae13"),
                            CategoryName = "Chicken",
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8331)
                        },
                        new
                        {
                            Id = new Guid("83e1a69b-9f9e-46c8-ba07-f47520a00f11"),
                            CategoryName = "Dessert",
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8333)
                        },
                        new
                        {
                            Id = new Guid("98aed52e-91a2-497c-8c76-c53835529f17"),
                            CategoryName = "Goat",
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8334)
                        },
                        new
                        {
                            Id = new Guid("8eba0975-6fe4-4e74-82ca-397ae073d156"),
                            CategoryName = "Lamb",
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8338)
                        },
                        new
                        {
                            Id = new Guid("93b10295-185b-4ba6-822f-40d6fb25d9f0"),
                            CategoryName = "Miscellaneous",
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8339)
                        },
                        new
                        {
                            Id = new Guid("72546194-b5a2-49a2-aca7-ef4940ee9981"),
                            CategoryName = "Pasta",
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8341)
                        },
                        new
                        {
                            Id = new Guid("c4a019bd-c454-4533-b994-ad06d7290e23"),
                            CategoryName = "Pork",
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8342)
                        },
                        new
                        {
                            Id = new Guid("9ac68dca-5ab9-40dd-9ce5-61b7422e0b1b"),
                            CategoryName = "Seafood",
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8344)
                        },
                        new
                        {
                            Id = new Guid("0d256c48-6e94-4e42-ac0b-2b6404f55417"),
                            CategoryName = "Side",
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8345)
                        },
                        new
                        {
                            Id = new Guid("2c48936a-840d-4620-a87e-61523aee04d8"),
                            CategoryName = "Starter",
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8346)
                        },
                        new
                        {
                            Id = new Guid("e794f138-d04a-4063-85b4-f3e3bada094a"),
                            CategoryName = "Vegan",
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8348)
                        },
                        new
                        {
                            Id = new Guid("398b06b0-f436-430d-9c4a-c1ebca03ffe2"),
                            CategoryName = "Vegetarian",
                            CreatedDate = new DateTime(2023, 12, 26, 13, 36, 55, 93, DateTimeKind.Utc).AddTicks(8351)
                        });
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Files");

                    b.HasDiscriminator<string>("Discriminator").HasValue("File");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AllergyId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<int>("CookingTime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PreparationTime")
                        .HasColumnType("integer");

                    b.Property<string>("RecipeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RecipeText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AllergyId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.RecipeComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("RecipeComments");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.RecipeIngredient", b =>
                {
                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("RecipeId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("RecipeIngredients");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.RecipeImageFile", b =>
                {
                    b.HasBaseType("TezAPI.Domain.Entities.File");

                    b.HasDiscriminator().HasValue("RecipeImageFile");
                });

            modelBuilder.Entity("AllergyUser", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Allergy", null)
                        .WithMany()
                        .HasForeignKey("UserAllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TezAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserAllergiesId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryRecipe", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TezAPI.Domain.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryUser", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TezAPI.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("UserFavoriteCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TezAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeRecipeImageFile", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.RecipeImageFile", null)
                        .WithMany()
                        .HasForeignKey("RecipeImageFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TezAPI.Domain.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeUser", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("FavoriteRecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TezAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.Identity.AppUser", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.Recipe", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Allergy", "Allergy")
                        .WithMany()
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TezAPI.Domain.Entities.User", "Writer")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergy");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.RecipeComment", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Recipe", "Recipe")
                        .WithMany("Comments")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TezAPI.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.RecipeIngredient", b =>
                {
                    b.HasOne("TezAPI.Domain.Entities.Ingredient", "Ingredient")
                        .WithMany("Recipes")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TezAPI.Domain.Entities.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.Ingredient", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.Recipe", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("TezAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
